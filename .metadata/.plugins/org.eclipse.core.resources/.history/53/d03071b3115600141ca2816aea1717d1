package com.hollandhaptics.frebble;

import com.microsoft.windowsazure.mobileservices.*;
import com.google.*;
import android.R.string;
import org.json.*;
import java.util.concurrent.atomic.AtomicBoolean;
import android.support.v7.app.ActionBarActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.webkit.CookieSyncManager;
import android.widget.EditText;

import java.net.CookieManager;
import java.net.MalformedURLException;
import java.util.List;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;

import android.app.AlertDialog;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;

import java.util.concurrent.atomic.AtomicBoolean;
import com.google.android.gms.common.api.*;
import com.google.example.games.basegameutils.BaseGameActivity;



public class MainActivity extends BaseGameActivity implements View.OnClickListener{

	
	@Override
	public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    setContentView(R.layout.activity_main);
	    
	    findViewById(R.id.sign_in_button).setOnClickListener(this);
	    findViewById(R.id.sign_out_button).setOnClickListener(this);

	    
	}

	
	@Override
	public void onClick(View v) {
		  if (v.getId() == R.id.sign_in_button) {
		        // start the asynchronous sign in flow
		        beginUserInitiatedSignIn();
		    }
		    else if (v.getId() == R.id.sign_out_button) {
		        // sign out.
		        signOut();

		        // show sign-in button, hide the sign-out button
		        findViewById(R.id.sign_in_button).setVisibility(View.VISIBLE);
		        findViewById(R.id.sign_out_button).setVisibility(View.GONE);
		    }

		
	}
	
	@Override
	public void onSignInSucceeded() {
		 // show sign-out button, hide the sign-in button
	    findViewById(R.id.sign_in_button).setVisibility(View.GONE);
	    findViewById(R.id.sign_out_button).setVisibility(View.VISIBLE);

	    // (your code here: update UI, enable functionality that depends on sign in, etc)

		
	}


	@Override
	public void onSignInFailed() {
		  // Sign in has failed. So show the user the sign-in button.
	    findViewById(R.id.sign_in_button).setVisibility(View.VISIBLE);
	    findViewById(R.id.sign_out_button).setVisibility(View.GONE);

		
	}


	
	
}










/* 
 * 
 * THIS IS THE CODE FOR THE AZURE LOGIN PREVIOUSLY DON'T WANT TO REMOVE JUST IN CASE.
 * 
 * public class MainActivity extends ActionBarActivity implements View.OnClickListener
{
	private MobileServiceClient mClient;
	private ProgressBar mProgressBar;
	
	Button Googlebtn;
	Button Facebookbtn;
	Button Twitterbtn;
	Button Microsoftbtn;
	
	public static final String SHAREDPREFFILE = "temp"; 
	public static final String USERIDPREF = "uid";  
	public static final String TOKENPREF = "tkn";
	
	public boolean bAuthenticating = false;
	public final Object mAuthenticationLock = new Object();
	
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.activity_main);
        mProgressBar = (ProgressBar) findViewById(R.id.loadingProgressBar);
	    // Initialize the progress bar
	    mProgressBar.setVisibility(ProgressBar.GONE);
	    
	 // Importing all assets like buttons, text fields
	    Googlebtn = (Button) findViewById(R.id.Google_btn);
	    Facebookbtn = (Button) findViewById(R.id.Facebook_btn);
	    Twitterbtn = (Button) findViewById(R.id.Twitter_btn);
	    Microsoftbtn = (Button) findViewById(R.id.Microsoft_btn);
        
	    Googlebtn.setOnClickListener(this);
	    Facebookbtn.setOnClickListener(this);
	    Twitterbtn.setOnClickListener(this);
	    Microsoftbtn.setOnClickListener(this);
	    
        try {
			mClient = new MobileServiceClient(
					"https://myfrebble.azure-mobile.net/",
					"hqJxCKJqKdVwOInmcuEIYnMgwguXDF57", this);
			//place authenticate after button is pressed.
			//authenticate();
			
		} 
        
        catch (MalformedURLException e) {
	        createAndShowDialog(new Exception("Error creating the Mobile Service. " +
		            "Verify the URL"), "Error");
		    }
        
        logOutMethod();
        
        	
        
        
        
        
    }
	
	@Override
	public void onClick(View v)
	{
		MobileServiceAuthenticationProvider provider = null;
		
		switch(v.getId())
		{
			case R.id.Google_btn:
				provider = MobileServiceAuthenticationProvider.Google;
				authenticate(provider, false);
			break;
			case R.id.Facebook_btn:
				provider = MobileServiceAuthenticationProvider.Facebook;
				authenticate(provider, false);
				
            break;
			case R.id.Twitter_btn:
				provider = MobileServiceAuthenticationProvider.Twitter;
				authenticate(provider, false);
            break;
			case R.id.Microsoft_btn:
				provider = MobileServiceAuthenticationProvider.MicrosoftAccount;
				authenticate(provider, false);
			break;
		}
	}
	
	private void createAndShowDialog(Exception exception, String title) {
		Throwable ex = exception;
		if(exception.getCause() != null){
			ex = exception.getCause();
		}
		createAndShowDialog(ex.getMessage(), title);
	}
	
	/**
	 * Creates a dialog and shows it
	 * 
	 * @param message
	 *            The dialog message
	 * @param title
	 *            The dialog title
	 *
	private void createAndShowDialog(String message, String title) {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);

		builder.setMessage(message);
		builder.setTitle(title);
		builder.create().show();
	}
	
	
	//AUTHENTICATE METHOD
	private void authenticate(MobileServiceAuthenticationProvider provider,boolean bRefreshCache) {
		 
		bAuthenticating = true;
		
		if (bRefreshCache || !loadUserTokenCache(mClient))
		    {
		    	// Login using the selected provider with provider parameter.
			    mClient.login(provider,
			            new UserAuthenticationCallback() {

			                @Override
			                public void onCompleted(MobileServiceUser user,
			                        Exception exception, ServiceFilterResponse response) {
			                	
			                	
			                	synchronized(mAuthenticationLock){
			                    if (exception == null) {
			                    	Intent intentLogin = new Intent(getApplicationContext(),
			                                HomeActivity.class);
			                        startActivity(intentLogin);
			                    	
			                    }
			                    else
			                    {
			                    	createAndShowDialog("Login Error", "Error");
			                    }
			                    bAuthenticating = false;
	                            mAuthenticationLock.notifyAll();
			                	}
			                }
			            });
		    }
			else
			{

		        // Other threads may be blocked waiting to be notified when 
		        // authentication is complete.
		        synchronized(mAuthenticationLock)
		        {
		            bAuthenticating = false;
		            mAuthenticationLock.notifyAll();
		        }
			}
	    
	}
	
	private void cacheUserToken(MobileServiceUser user)
	{
	    SharedPreferences prefs = getSharedPreferences(SHAREDPREFFILE, Context.MODE_PRIVATE);
	    Editor editor = prefs.edit();
	    editor.putString(USERIDPREF, user.getUserId());
	    editor.putString(TOKENPREF, user.getAuthenticationToken());
	    editor.commit();
	}   
	
	private boolean loadUserTokenCache(MobileServiceClient client)
	{
	    SharedPreferences prefs = getSharedPreferences(SHAREDPREFFILE, Context.MODE_PRIVATE);
	    String userId = prefs.getString(USERIDPREF, "undefined"); 
	    if (userId == "undefined")
	        return false;
	    String token = prefs.getString(TOKENPREF, "undefined"); 
	    if (token == "undefined")
	        return false;

	    MobileServiceUser user = new MobileServiceUser(userId);
	    user.setAuthenticationToken(token);
	    client.setCurrentUser(user);

	    return true;
	}
	
	public boolean detectAndWaitForAuthentication()
	{
	    boolean detected = false;
	    synchronized(mAuthenticationLock)
	    {
	        do
	        {
	            if (bAuthenticating == true)
	                detected = true;
	            try
	            {
	                mAuthenticationLock.wait(1000);
	            }
	            catch(InterruptedException e)
	            {}
	        }
	        while(bAuthenticating == true);
	    }
	    if (bAuthenticating == true)
	        return true;

	    return detected;
	}
	
	/**
	 * Waits for authentication to complete then adds or updates the token 
	 * in the X-ZUMO-AUTH request header.
	 * 
	 * @param request
	 *            The request that receives the updated token.
	 *
	private void waitAndUpdateRequestToken(ServiceFilterRequest request)
	{
	    MobileServiceUser user = null;
	    if (detectAndWaitForAuthentication())
	    {
	        user = mClient.getCurrentUser();
	        if (user != null)
	        {
	            request.removeHeader("X-ZUMO-AUTH");
	            request.addHeader("X-ZUMO-AUTH", user.getAuthenticationToken());
	        }
	    }
	}
	
	
	
	/**
	 * The RefreshTokenCacheFilter class filters responses for HTTP status code 401. 
	 * When 401 is encountered, the filter calls the authenticate method on the 
	 * UI thread. Out going requests and retries are blocked during authentication. 
	 * Once authentication is complete, the token cache is updated and 
	 * any blocked request will receive the X-ZUMO-AUTH header added or updated to 
	 * that request.   
	 *
	private class RefreshTokenCacheFilter implements ServiceFilter {

	    AtomicBoolean mAtomicAuthenticatingFlag = new AtomicBoolean();

	    /**
	     * The AuthenticationRetryFilterCallback class is a wrapper around the response 
	     * callback that encapsulates the request and other information needed to enable 
	     * a retry of the request when HTTP status code 401 is encountered. 
	     *
	    private class AuthenticationRetryFilterCallback implements ServiceFilterResponseCallback
	    {
	        // Data members used to retry the request during the response.
	        ServiceFilterRequest mRequest;
	        NextServiceFilterCallback mNextServiceFilterCallback;
	        ServiceFilterResponseCallback mResponseCallback;

	        public AuthenticationRetryFilterCallback(ServiceFilterRequest request, 
	                NextServiceFilterCallback nextServiceFilterCallback, 
	                ServiceFilterResponseCallback responseCallback)
	        {
	            mRequest = request;
	            mNextServiceFilterCallback = nextServiceFilterCallback;
	            mResponseCallback = responseCallback;
	        }

	        @Override
	        public void onResponse(ServiceFilterResponse response, Exception exception) {

	            // Filter out the 401 responses to update the token cache and 
	            // retry the request
	            if ((response != null) && (response.getStatus().getStatusCode() == 401))
	            { 
	                // Two simultaneous requests from independent threads could get HTTP 
	                // status 401. Protecting against that right here so multiple 
	                // authentication requests are not setup to run on the UI thread.
	                // We only want to authenticate once. Other requests should just wait 
	                // and retry with the new token.
	                if (mAtomicAuthenticatingFlag.compareAndSet(false, true))                           
	                {
	                    // Authenticate on UI thread
	                    runOnUiThread(new Runnable() {
	                        @Override
	                        public void run() {
	                            // Force a token refresh during authentication.
	                            authenticate(null, true);
	                        }
	                    });
	                }

	                // Wait for authentication to complete then 
	                // update the token in the request.
	                waitAndUpdateRequestToken(this.mRequest);
	                mAtomicAuthenticatingFlag.set(false);                       

	                // Retry recursively with a new token as long as we get a 401.
	                mNextServiceFilterCallback.onNext(this.mRequest, this);
	            }

	            // Responses that do not have 401 status codes just pass through.
	            else if (this.mResponseCallback != null)  
	              mResponseCallback.onResponse(response, exception);
	        }
	    }

	    @Override
	    public void handleRequest(final ServiceFilterRequest request, 
	        final NextServiceFilterCallback nextServiceFilterCallback,
	        ServiceFilterResponseCallback responseCallback) {

	        // In this example, if authentication is already in progress we block the request
	        // until authentication is complete to avoid unnecessary authentications as 
	        // a result of HTTP status code 401. 
	        // If authentication was detected, add the token to the request.
	        waitAndUpdateRequestToken(request);

	        // Wrap the request in a callback object that will facilitate retries.
	        AuthenticationRetryFilterCallback retryCallbackObject = 
	            new AuthenticationRetryFilterCallback(request, nextServiceFilterCallback,
	                  responseCallback); 

	        // Send the request down the filter chain.
	        nextServiceFilterCallback.onNext(request, retryCallbackObject);         
	    }
	}
	
	  @Override
	  public boolean onCreateOptionsMenu(Menu menu) {
	        // Inflate the menu; this adds items to the action bar if it is present.
	        getMenuInflater().inflate(R.menu.main, menu);
	        return true;
	    }

	  @Override
	  public boolean onOptionsItemSelected(MenuItem item) {
	        // Handle action bar item clicks here. The action bar will
	        // automatically handle clicks on the Home/Up button, so long
	        // as you specify a parent activity in AndroidManifest.xml.
	        int id = item.getItemId();
	        if (id == R.id.action_settings) {
	            return true;
	        }
	        return super.onOptionsItemSelected(item);
	    }
	
	

}
public void logOutMethod()
	{
		if(SettingsActivity.logoutClicked)
		{
			mClient.logout();
			Intent intentLogout = new Intent(getApplicationContext(),
                    HomeActivity.class);
            startActivity(intentLogout);
		}
		
	}
*/
